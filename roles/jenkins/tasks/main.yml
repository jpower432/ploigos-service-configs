---
- name: Wait for Jenkins to respond to requests
  uri:
    url: '{{ jenkins_url }}/login'
    validate_certs: no
  register: jenkins_endpoint
  until: jenkins_endpoint.status == 200
  retries: 30
  delay: 20

- name: Create Gitea Credential
  uri:
    url: "{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials"
    method: POST
    validate_certs: false
    headers:
      Authorization: 'Bearer {{ jenkins_token }}'
      Content-Type: 'text/xml'
    body: "{{ lookup('template', 'gitea-token-credential.xml.j2') }}"
    status_code: 200,409
  register: credential_response
  changed_when: credential_response.status == 200

- name: Ensure Gitea Server is configured in jenkins settings
  uri:
    url: '{{ jenkins_url }}/script'
    method: POST
    body_format: form-urlencoded
    validate_certs: false
    headers:
      Authorization: 'Bearer {{ jenkins_token }}'
    body:
      script: >
        JenkinsLocationConfiguration.get().setUrl("{{ jenkins_url }}/");
        giteaServers = Jenkins.instance.getExtensionList(org.jenkinsci.plugin.gitea.servers.GiteaServers.class)[0];
        giteaServers.updateServer(new org.jenkinsci.plugin.gitea.servers.GiteaServer("platform", "{{ jenkins_gitea_url }}", true, "platform-gitea-token", "{{ jenkins_gitea_url }}/"));
        giteaServers.save();
        ["BranchSpec getName", "GitSCM getBranches", "GitSCM getUserRemoteConfigs", "UserRemoteConfig getUrl"].each{
          method -> org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval.get().approveSignature("method hudson.plugins.git.${method}")
        }
  register: org_response

- name: Create platform Gitea Organization
  uri:
    url: '{{ jenkins_url }}/createItem?name=platform'
    method: POST
    validate_certs: false
    headers:
      Authorization: 'Bearer {{ jenkins_token }}'
      Content-Type: 'text/xml'
    body: "{{ lookup('template', 'gitea-organization.xml.j2') }}"
    status_code: 200,400
  register: org_response
  changed_when: org_response.status == 200
